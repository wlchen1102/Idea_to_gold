---
alwaysApply: true
---
## 沟通原则
- 永远使用简体中文进行思考和对话

## 代码原则
### KISS原则 (Keep It Simple, Stupid)
 - 鼓励AI编写简洁明了的解决方案。
 - 避免过度设计和不必要的复杂性。
 - 使代码更具可读性和可维护性。

### YAGNI原则 (You Aren't Gonna Need It)
 - 防止AI添加当前用不到的预测性功能。
 - 专注于实现当前已明确的需求。
 - 减少代码冗余和维护成本。

### SOLID原则
 - 单一职责原则 (Single Responsibility Principle)
 - 开闭原则 (Open-Closed Principle)
 - 里氏替换原则 (Liskov Substitution Principle)
 - 接口隔离原则 (Interface Segregation Principle)
 - 依赖倒置原则 (Dependency Inversion Principle)
 
 ### 代码通用规范
 - 优先保证代码简洁易懂。
 - 别搞过度设计，简单实用就好。
 - 写代码时，要注意圈复杂度，函数尽量小，尽量可以复用，尽量不写重复代码。
 - 写代码时，注意模块设计，尽量使用设计模式。
 - 写代码时，添加必要的中文注释，便于我理解。
 - 仅修改与特定请求直接相关的代码。避免更改无关的功能。
 - 改动或者解释代码前，必须看完所有相关代码，不能偷懒。
 - 接收到问题时，要将问题分为较小的步骤，在实施之前单独考虑每个步骤。
 - 在更改之前，请始终根据代码和日志的证据提供推理。
 - 修改代码以后，要及时反思，是否真的能够解决问题。
 - 给我解释代码的时候，说人话，别拽专业术语。最好有图（mermaid风格）
 - 帮我实现的时候，需要给出原理，并给出执行步骤，最好有图（mermaid风格）
 
 
 ## 代码架构（Code Architecture）
- 编写代码的硬性指标，包括以下原则：
  （1）对于 Python、JavaScript、TypeScript 等动态语言，尽可能确保每个代码文件不要超过 300 行
  （2）对于 Java、Go、Rust 等静态语言，尽可能确保每个代码文件不要超过 400 行
  （3）每层文件夹中的文件，尽可能不超过 8 个。如有超过，需要规划为多层子文件夹
- 除了硬性指标以外，还需要时刻关注优雅的架构设计，避免出现以下可能侵蚀我们代码质量的「坏味道」：
  （1）僵化 (Rigidity): 系统难以变更，任何微小的改动都会引发一连串的连锁修改。
  （2）冗余 (Redundancy): 同样的代码逻辑在多处重复出现，导致维护困难且容易产生不一致。
  （3）循环依赖 (Circular Dependency): 两个或多个模块互相纠缠，形成无法解耦的“死结”，导致难以测试与复用。
  （4）脆弱性 (Fragility): 对代码一处的修改，导致了系统中其他看似无关部分功能的意外损坏。
  （5）晦涩性 (Obscurity): 代码意图不明，结构混乱，导致阅读者难以理解其功能和设计。
  （6）数据泥团 (Data Clump): 多个数据项总是一起出现在不同方法的参数中，暗示着它们应该被组合成一个独立的对象。
  （7）不必要的复杂性 (Needless Complexity): 用“杀牛刀”去解决“杀鸡”的问题，过度设计使系统变得臃肿且难以理解。
- 【非常重要！！】无论是你自己编写代码，还是阅读或审核他人代码时，都要严格遵守上述硬性指标，以及时刻关注优雅的架构设计。
- 【非常重要！！】无论何时，一旦你识别出那些可能侵蚀我们代码质量的「坏味道」，都应当立即询问用户是否需要优化，并给出合理的优化建议。

## 如果你要执行终端命令，必须一个一个执行，当一个执行完，再执行下一个，不允许使用“&&”执行多个终端命令